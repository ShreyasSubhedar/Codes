# -*- coding: utf-8 -*-
"""numpy-array-operations.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f-HJp4_-lT5w_iL1Rbo61pMx8dzX4D5G
"""

# Jovian Commit Essentials
# Please retain and execute this cell without modifying the contents for `jovian.commit` to work
!pip install jovian --upgrade -q
import jovian
jovian.utils.colab.set_colab_file_id('1f-HJp4_-lT5w_iL1Rbo61pMx8dzX4D5G')

"""> ### **Assignment 2 - Numpy Array Operations** 
>
> This assignment is part of the course ["Data Analysis with Python: Zero to Pandas"](http://zerotopandas.com). The objective of this assignment is to develop a solid understanding of Numpy array operations. In this assignment you will:
> 
> 1. Pick 5 interesting Numpy array functions by going through the documentation: https://numpy.org/doc/stable/reference/routines.html 
> 2. Run and modify this Jupyter notebook to illustrate their usage (some explanation and 3 examples for each function). Use your imagination to come up with interesting and unique examples.
> 3. Upload this notebook to your Jovian profile using `jovian.commit` and make a submission here: https://jovian.ml/learn/data-analysis-with-python-zero-to-pandas/assignment/assignment-2-numpy-array-operations
> 4. (Optional) Share your notebook online (on Twitter, LinkedIn, Facebook) and on the community forum thread: https://jovian.ml/forum/t/assignment-2-numpy-array-operations-share-your-work/10575 . 
> 5. (Optional) Check out the notebooks [shared by other participants](https://jovian.ml/forum/t/assignment-2-numpy-array-operations-share-your-work/10575) and give feedback & appreciation.
>
> The recommended way to run this notebook is to click the "Run" button at the top of this page, and select "Run on Binder". This will run the notebook on mybinder.org, a free online service for running Jupyter notebooks.
>
> Try to give your notebook a catchy title & subtitle e.g. "All about Numpy array operations", "5 Numpy functions you didn't know you needed", "A beginner's guide to broadcasting in Numpy", "Interesting ways to create Numpy arrays", "Trigonometic functions in Numpy", "How to use Python for Linear Algebra" etc.
>
> **NOTE**: Remove this block of explanation text before submitting or sharing your notebook online - to make it more presentable.


# Introduction to Numpy 


###  Methods and Approach

NumPy is the fundamental package for scientific computing in Python. It is a Python library that provides a multidimensional array object, various derived objects (such as masked arrays and matrices), and an assortment of routines for fast operations on arrays, including mathematical, logical, shape manipulation, sorting, selecting, I/O, discrete Fourier transforms, basic linear algebra, basic statistical operations, random simulation and much more.
Numpy supports OOP 
Numpy is super fast du to precompiled C Code.

- np.shape
- np.extract
- np.setdiff1d
- np.nan
- np.repeat

The recommended way to run this notebook is to click the "Run" button at the top of this page, and select "Run on Binder". This will run the notebook on mybinder.org, a free online service for running Jupyter notebooks.
"""

!pip install jovian --upgrade -q

import jovian

jovian.commit(project='numpy-array-operations')

"""Let's begin by importing Numpy and listing out the functions covered in this notebook."""

import numpy as np

# List of functions explained 
function1 = np.shape
function2 = np.extract
function3 = np.setdiff1d
function4 = np.nan
function5 = np.repeat

"""## Function 1 - np.shape

shape will give you tuple of integers , it'll help us to quickly get the dimension of ndarray. The best use of this is mainly for the calculation of total nuber of rows and column in dataset.
"""

# Example 1 - working

arr2 = np.array([[5, 6, 7], 
        [8, 9, 10]])

arr2.shape

"""*Explanation* here arr2 is simple 2d array that shape attribute is tellig us"""

# Example 2 - working
complicated = np.array([[[[1],[1]]]])

complicated.shape

"""*Explanation* here the complicated multidimentional array is easy simplified by shape method"""

# Example 3 - breaking (to illustrate when it breaks)
arr1 = [[1, 2], 
        [3, 4.]]

arr1.shape

"""Explanation about example (Example breaks because we are not providing ndarray object)

Really helpful function to get thing done.
"""

jovian.commit(project='numpy-array-operations')

"""## Function 2 -  np.extract


We can use the Numpy extract() function to extract specific elements from an array that matches the condition.
"""

# Example 1 - working
arr =np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
# Define the codition, here we take MOD 3 if zero
condition = np.mod(arr, 3)==0
np.extract(condition, arr)

"""Explanation about example"""

# Example 2 - working
np.extract(((arr > 1) & (arr < 6)), arr)

"""Explanation about example"""

# Example 3 - breaking (to illustrate when it breaks)
np.extract(arr)
np.extract((arr>3 arr<5),arr)

"""Explanation about example (Breaks because 1st the condition is missing and in 2nd the condition is invalid )
easily fixed by proper condition

---

extract helps in so many ways to complete the  computation of ndarray into small.
"""

jovian.commit(project='numpy-array-operations')

"""## Function 3 - np.setdiff1d

Return the unique values in an array that are not in present in another array. This is equivalent to a difference of two arrays.
"""

# Example 1 - working
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
b = np.array([3,4,7,6,7,8,11,12,14])
c = np.setdiff1d(a,b)
c

"""Getting difference of two ndarray using setdiff1d"""

# Example 2 - working
a= np.array([True,False,True,False])
b= np.array([True,False])
np.setdiff1d(a,b)

"""Explanation : Using bool dtype we can easily find the intersection from 2 numpy arrays"""

# Example 3 - breaking (to illustrate when it breaks)
a = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
b = np.array([3,4,7,"True",7,8,11,12,14])
np.setdiff1d(a,b)

"""Explanation about example (Breaks because coud'nt able to perform elementwise comparison, due to wrong dtype)

Helps to find the unique ele. quickly
"""

jovian.commit(project='numpy-array-operations')

"""## Function 4 - np.nan

dirty data sets contain null values with other denominations (e.g. Unknown, â€” , and n/a), making difficult to detect and drop them.
To filter the data in most easy manner we can use np.nan function to fill up this null values by (nan) constant in Python
We can use not a number to represent missing or null values in Pandas.
"""

# Example 1 - working
import pandas as pd
ds= pd.DataFrame(["Unknown","-","null",34,34,34,34,34])
ds.replace(['Unknown','-','null'],np.nan, inplace=True)
ds

"""Explanation about example"""

# Example 2 - working
import pandas as pd
ds= pd.DataFrame(["-","Shreyas","Subhedar",4,2,4,1,111])
ds.replace(['-'],np.nan, inplace=True)
ds

"""Explanation about example"""

# Example 3 - breaking (to illustrate when it breaks)
li=["-","Shreyas","Subhedar",4,2,4,1,111]
li.replace(['-'],np.nan,inplace=True)

"""Explanation about example (because replace takes dataframe and not list)

np.nan is helpful function is data analysis it helps us by filtering the data and makes the calculations more acurate and precise.
(without is unpredictability)
"""

jovian.commit(project='numpy-array-operations')

"""## Function 5 - np.repeat

The numpy.repeat(a, repeats, axis=None) function repeats the elements of an array. The number of repetitions is specified by the second argument
"""

# Example 1 - working
# repeat number "YOYOY" 5 times
np.repeat("YOYOYOY",5)
# array([3, 3, 3, 3, 3])

"""Simply repeats the variable n number of times"""

# Example 2 - working
x = np.array([[1,2,34],[3,12,4]])
np.repeat(x, 3, axis=1)

"""awe can repeat the array as er the axis"""

# Example 3 - breaking (to illustrate when it breaks)
np.repeat([1,2,3],4,1)

"""Explanation about example (breaks because we pass the 1d array and trying to repeat the ele. on axis 1 (axis 1 is out of bounds for array of dimension 1))

repeat method is really helpful to test the functionality of various other ,ethods as well as data analysis and creating dataset is easier using repeat
"""

jovian.commit(project='numpy-array-operations')

"""## Conclusion

We deep dive into the world of numpy library , what it is popular and how it helps for data computation.
Using Numpy we can smoothly go towards pandas library for the exact taste of dataframes and their analysis

## Reference Links
Provide links to your references and other interesting articles about Numpy arrays:
* Numpy official tutorial : https://numpy.org/doc/stable/user/quickstart.html
* Pandas Data frame used in np.nan https://datatofish.com/create-pandas-dataframe/
"""

jovian.commit(project='numpy-array-operations')

